[project]
name = "DjangoProductManagementApp"
version = "0.1.0"
description = "Default template for PDM package"
authors = [{ name = "Spokelax", email = "spokelaxpc@gmail.com" }]
license-files = ["LICENSE"]
readme = "README.md"
requires-python = "==3.12.*"
dependencies = [
  "Django>=5.2.1",
  "uvicorn>=0.34.2",
  "chardet>=5.2.0",
  "django-asgi-lifespan>=0.4.0",
  "Pillow>=11.2.1",
]

[dependency-groups]
dev = [
  "colorama>=0.4.6",
  "Ruff>=0.11.10",
  "pdm>=2.24.1",
  "black>=25.1.0",
  "loguru>=0.7.3",
  "django-tailwind[reload]>=4.0.1",
  "python-dotenv>=1.1.0",
]
setup = ["colorama>=0.4.6", "loguru>=0.7.3", "click>=8.2.0"]

[tool.pdm]
distribution = false

[tool.pdm.scripts]
# script = " { cmd = "...", help = "..." }

setup = { cmd = "./scripts/setup.py", help = "Setup the project" }

# "app:start" = { cmd = "uvicorn DjangoProductManagementApp.asgi:application --host 127.0.0.1 --port 8000 --app-dir src", help = "Start the backend server" }
# "app:dev" = { cmd = "python ./scripts/run_app_dev.py", help = "Start both Django and Tailwind servers in development mode" } # "app:start" = { cmd = "uvicorn DjangoProductManagementApp.asgi:application --host 127.0.0.1 --port 8000 --app-dir src", help = "Start the backend server" }

lint = { cmd = "ruff check ./src", help = "Lint the project (ruff)" }
format = { cmd = "ruff format ./src", help = "Format the project (ruff)" }

makemigrations = { cmd = "python ./src/manage.py makemigrations", help = "Create new migrations" }
migrate = { cmd = "python ./src/manage.py migrate", help = "Apply migrations" }
flush = { cmd = "python ./src/manage.py flush --no-input", help = "Flush the database" }
superuser = { cmd = "python ./src/manage.py createsuperuser", help = "Create a superuser for the database" }

static = { cmd = "python ./src/manage.py collectstatic --noinput", help = "Collect static files" }

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.history
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
exclude = ["venv", ".history", ".vscode"]
include = ["src/**/*.py", "scripts/**/*.py"]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# select = ["ALL"]
select = ["E", "F", "I", "UP", "W"] # Minimal #TODO: add full desc
ignore = ["E501"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.isort]
profile = "black"
makemigrations = { cmd = "python ./src/manage.py makemigrations", help = "Create new migrations" }
migrate = { cmd = "python ./src/manage.py migrate", help = "Apply migrations" }
